//////////////////////////////////////////////////////
// REQUIRE DOTENV MODULE
//////////////////////////////////////////////////////
require("dotenv").config();

//////////////////////////////////////////////////////
// REQUIRE JWT MODULE
//////////////////////////////////////////////////////
const jwt = require("jsonwebtoken");

//////////////////////////////////////////////////////
// SET JWT CONFIGURATION
//////////////////////////////////////////////////////
const secretKey = process.env.JWT_SECRET_KEY;
const tokenDuration = process.env.JWT_EXPIRES_IN;
const tokenAlgorithm = process.env.JWT_ALGORITHM;

//////////////////////////////////////////////////////
// MIDDLEWARE FUNCTIONS JWT TOKEN
//////////////////////////////////////////////////////
module.exports = {
    generateToken : (req, res, next) => {
        console.log(`A token was generated`);

        // payload is an object containing data embedded in the JWT token
        const payload = {
            user_id : res.locals.user_id,
            timestamp: new Date()
        };

        const options = {
            algorithm : tokenAlgorithm,
            expiresIn : tokenDuration
        };

        const callback = (err, token) => {
            if(err) {
                console.error(`Error JWT: ${err}`);
                res.status(500).json(err);
            } else {
                res.locals.token = token; // becomes accessible to the subsequent middleware functions
                next();
            };
        };
        console.log('Before JWT generation');

        // jwt.sign() is a method to create a new JWT token 
        const token = jwt.sign(payload, secretKey, options, callback);
        console.log('After JWT generation. Token:', token);
    },

    sendToken : (req, res, next) => { // used after the user has successfully authenticated
        res.status(200).json({
            message : res.locals.message,
            token : res.locals.token // stores the JSON web token generated by jwt.sign()
        });
    },

    verifyToken : (req, res, next) => {
        const authHeader = req.headers.authorization;

        // checks for the authorization header
        if (!authHeader || !authHeader.startsWith('Bearer ')) {
            return res.status(401).json({
                error : 'No Token Provided'
            });
        };

        // extracts the token from the authorization header
        const token = authHeader.replace('Bearer ', '');
        if(!token) {
            return res.status(401).json({
                error : 'No Token Provided'
            });
        };

        const callback = (err, decoded) => {
            if(err) {
                return res.status(401).json({
                    error : 'No Token Provided'
                });
            } else {

                // if the token is valid it would be stored for the next middleware
                res.locals.user_id = decoded.user_id;
                res.locals.tokenTimestamp = decoded.timestamp;
                next();
            };
        };

        jwt.verify(token, secretKey, callback);
    }
};